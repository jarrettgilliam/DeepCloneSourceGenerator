namespace DeepCloneSourceGenerator.Tests;

using System;
using System.Linq;
using System.Reflection;
using DeepClone.SourceGenerator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

public class DeepCloneSourceGeneratorTests
{
    [Fact]
    public void Generator_GeneratesSource()
    {
        string expectedHintName = "DeepCloneableAttribute.g.cs";
        string expectedSource = """
            // <auto-generated/>
            namespace JackHenry.JHAContractTypes;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DeepClone.SourceGenerator", "1.0.0.0")]
            [global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
            internal sealed class DeepCloneableAttribute : global::System.Attribute
            {
            }
            """;

        var result = RunGenerator<DeepCloneSourceGenerator>("");

        GeneratedSourceResult? actual = result.Results.Single().GeneratedSources
            .FirstOrDefault(r => r.HintName == expectedHintName);

        Assert.True(actual.HasValue);
        Assert.Equal(expectedSource, actual.Value.SourceText.ToString());
    }

    [Fact]
    public void Generator_Has_Generator_Attribute()
    {
        Type generatorType = typeof(DeepCloneSourceGenerator);

        GeneratorAttribute? attribute = generatorType.GetCustomAttribute<GeneratorAttribute>();

        Assert.NotNull(attribute);
        Assert.Collection(attribute!.Languages, r => Assert.Equal(LanguageNames.CSharp, r));
    }

    private static GeneratorDriverRunResult RunGenerator<T>(string userCode)
        where T : IIncrementalGenerator, new()
    {
        var compilation = CSharpCompilation.Create("InMemoryUnitTestProject",
            new[] { CSharpSyntaxTree.ParseText(userCode) },
            Basic.Reference.Assemblies.Net70.References.All,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        IIncrementalGenerator generator = new T();
        ISourceGenerator sourceGenerator = generator.AsSourceGenerator();

        // trackIncrementalGeneratorSteps allows to report info about each step of the generator
        GeneratorDriver driver = CSharpGeneratorDriver.Create(
            generators: new ISourceGenerator[] { sourceGenerator },
            driverOptions: new GeneratorDriverOptions(default, trackIncrementalGeneratorSteps: true));

        driver = driver.RunGenerators(compilation);

        return driver.GetRunResult();
    }
}